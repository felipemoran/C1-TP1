C51 COMPILER V6.14  MODELE_C                                                               10/25/2018 14:31:58 PAGE 1   


C51 COMPILER V6.14, COMPILATION OF MODULE MODELE_C
OBJECT MODULE PLACED IN .\modele_c.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE .\modele_c.c INTVECTOR(0X8100) DEBUG OBJECTEXTEND CODE LISTINCLUDE SYMBOLS

stmt level    source

   1          /************************************************************************
   2           **	Programme exemple pour le TP æcontroleur		       **
   3           **                                                                    **
   4           ************************************************************************/
   5           
   6          #include <reg592.h>                /* registres specifiques au 592 */
   1      =1  /*--------------------------------------------------------------------------
   2      =1  REG592.H
   3      =1  
   4      =1  Header file for 80592.
   5      =1  Copyright (c) 1988-1997 Keil Elektronik GmbH and Keil Software, Inc.
   6      =1  All rights reserved.
   7      =1  --------------------------------------------------------------------------*/
   8      =1  
   9      =1  /*  BYTE Registers  */
  10      =1  sfr P0    = 0x80;
  11      =1  sfr P1    = 0x90;
  12      =1  sfr P2    = 0xA0;
  13      =1  sfr P3    = 0xB0;
  14      =1  sfr P4    = 0xC0;
  15      =1  sfr P5    = 0xC4;
  16      =1  
  17      =1  sfr PSW   = 0xD0;
  18      =1  sfr ACC   = 0xE0;
  19      =1  sfr B     = 0xF0;
  20      =1  sfr SP    = 0x81;
  21      =1  sfr DPL   = 0x82;
  22      =1  sfr DPH   = 0x83;
  23      =1  sfr PCON  = 0x87;
  24      =1  sfr TCON  = 0x88;
  25      =1  sfr TMOD  = 0x89;
  26      =1  sfr TL0   = 0x8A;
  27      =1  sfr TL1   = 0x8B;
  28      =1  sfr TH0   = 0x8C;
  29      =1  sfr TH1   = 0x8D;
  30      =1  sfr IEN0  = 0xA8;
  31      =1  sfr IEN1  = 0xE8;
  32      =1  sfr IP0   = 0xB8;
  33      =1  sfr IP1   = 0xF8;
  34      =1  sfr S0CON = 0x98;
  35      =1  sfr S0BUF = 0x99;
  36      =1  sfr CML0  = 0xA9;
  37      =1  sfr CML1  = 0xAA;
  38      =1  sfr CML2  = 0xAB;
  39      =1  sfr CTL0  = 0xAC;
  40      =1  sfr CTL1  = 0xAD;
  41      =1  sfr CTL2  = 0xAE;
  42      =1  sfr CTL3  = 0xAF;
  43      =1  sfr ADCON = 0xC5;
  44      =1  sfr ADCH  = 0xC6;
  45      =1  sfr TM2IR = 0xC8;
  46      =1  sfr CMH0  = 0xC9;
  47      =1  sfr CMH1  = 0xCA;
  48      =1  sfr CMH2  = 0xCB;
  49      =1  sfr CTH0  = 0xCC;
C51 COMPILER V6.14  MODELE_C                                                               10/25/2018 14:31:58 PAGE 2   

  50      =1  sfr CTH1  = 0xCD;
  51      =1  sfr CTH2  = 0xCE;
  52      =1  sfr CTH3  = 0xCF;
  53      =1  
  54      =1  sfr CANSTA= 0xD8;
  55      =1  sfr CANCON= 0xD9;
  56      =1  sfr CANDAT= 0xDA;
  57      =1  sfr CANADR= 0xDB;
  58      =1  
  59      =1  sfr TM2CON= 0xEA;
  60      =1  sfr CTCON = 0xEB;
  61      =1  sfr TML2  = 0xEC;
  62      =1  sfr TMH2  = 0xED;
  63      =1  sfr STE   = 0xEE;
  64      =1  sfr RTE   = 0xEF;
  65      =1  sfr PWM0  = 0xFC;
  66      =1  sfr PWM1  = 0xFD;
  67      =1  sfr PWMP  = 0xFE;
  68      =1  sfr T3    = 0xFF;
  69      =1  
  70      =1  /*  BIT Registers  */
  71      =1  /*  PSW  */
  72      =1  sbit CY    = 0xD7;
  73      =1  sbit AC    = 0xD6;
  74      =1  sbit F0    = 0xD5;
  75      =1  sbit RS1   = 0xD4;
  76      =1  sbit RS0   = 0xD3;
  77      =1  sbit OV    = 0xD2;
  78      =1  sbit P     = 0xD0;
  79      =1  
  80      =1  /*  TCON  */
  81      =1  sbit TF1   = 0x8F;
  82      =1  sbit TR1   = 0x8E;
  83      =1  sbit TF0   = 0x8D;
  84      =1  sbit TR0   = 0x8C;
  85      =1  sbit IE1   = 0x8B;
  86      =1  sbit IT1   = 0x8A;
  87      =1  sbit IE0   = 0x89;
  88      =1  sbit IT0   = 0x88;
  89      =1  
  90      =1  /*  IEN0  */
  91      =1  sbit EA    = 0xAF;
  92      =1  sbit EAD   = 0xAE;
  93      =1  sbit ES1   = 0xAD;
  94      =1  sbit ES0   = 0xAC;
  95      =1  sbit ET1   = 0xAB;
  96      =1  sbit EX1   = 0xAA;
  97      =1  sbit ET0   = 0xA9;
  98      =1  sbit EX0   = 0xA8;
  99      =1  
 100      =1  /*  IEN1  */
 101      =1  sbit ET2   = 0xEF;
 102      =1  sbit ECM2  = 0xEE;
 103      =1  sbit ECM1  = 0xED;
 104      =1  sbit ECM0  = 0xEC;
 105      =1  sbit ECT3  = 0xEB;
 106      =1  sbit ECT2  = 0xEA;
 107      =1  sbit ECT1  = 0xE9;
 108      =1  sbit ECT0  = 0xE8;
 109      =1  
 110      =1  /*  IP0  */
 111      =1  sbit PAD   = 0xBE;
C51 COMPILER V6.14  MODELE_C                                                               10/25/2018 14:31:58 PAGE 3   

 112      =1  sbit PS1   = 0xBD;
 113      =1  sbit PS0   = 0xBC;
 114      =1  sbit PT1   = 0xBB;
 115      =1  sbit PX1   = 0xBA;
 116      =1  sbit PT0   = 0xB9;
 117      =1  sbit PX0   = 0xB8;
 118      =1  
 119      =1  /*  IP1  */
 120      =1  sbit PT2   = 0xFF;
 121      =1  sbit PCM2  = 0xFE;
 122      =1  sbit PCM1  = 0xFD;
 123      =1  sbit PCM0  = 0xFC;
 124      =1  sbit PCT3  = 0xFB;
 125      =1  sbit PCT2  = 0xFA;
 126      =1  sbit PCT1  = 0xF9;
 127      =1  sbit PCT0  = 0xF8;
 128      =1  
 129      =1  /*  P1  */
 130      =1  sbit CTX1  = 0x97;
 131      =1  sbit CTX0  = 0x96;
 132      =1  sbit RT2   = 0x95;
 133      =1  sbit T2    = 0x94;
 134      =1  sbit INT5  = 0x93;
 135      =1  sbit INT4  = 0x92;
 136      =1  sbit INT3  = 0x91;
 137      =1  sbit INT2  = 0x90;
 138      =1  sbit CT3I  = 0x93;
 139      =1  sbit CT2I  = 0x92;
 140      =1  sbit CT1I  = 0x91;
 141      =1  sbit CT0I  = 0x90;
 142      =1               
 143      =1  /*  P3  */
 144      =1  sbit RD    = 0xB7;
 145      =1  sbit WR    = 0xB6;
 146      =1  sbit T1    = 0xB5;
 147      =1  sbit T0    = 0xB4;
 148      =1  sbit INT1  = 0xB3;
 149      =1  sbit INT0  = 0xB2;
 150      =1  sbit TXD   = 0xB1;
 151      =1  sbit RXD   = 0xB0;
 152      =1  
 153      =1  /*  P4  */
 154      =1  sbit CMT1  = 0xC7;
 155      =1  sbit CMT0  = 0xC6;
 156      =1  sbit CMSR5 = 0xC5;
 157      =1  sbit CMSR4 = 0xC4;
 158      =1  sbit CMSR3 = 0xC3;
 159      =1  sbit CMSR2 = 0xC2;
 160      =1  sbit CMSR1 = 0xC1;
 161      =1  sbit CMSR0 = 0xC0;
 162      =1  
 163      =1  /*  S0CON  */
 164      =1  sbit SM0   = 0x9F;
 165      =1  sbit SM1   = 0x9E;
 166      =1  sbit SM2   = 0x9D;
 167      =1  sbit REN   = 0x9C;
 168      =1  sbit TB8   = 0x9B;
 169      =1  sbit RB8   = 0x9A;
 170      =1  sbit TI    = 0x99;
 171      =1  sbit RI    = 0x98;
 172      =1  
 173      =1  /*  TM2IR  */
C51 COMPILER V6.14  MODELE_C                                                               10/25/2018 14:31:58 PAGE 4   

 174      =1  sbit T20V  = 0xCF;
 175      =1  sbit CMI2  = 0xCE;
 176      =1  sbit CMI1  = 0xCD;
 177      =1  sbit CMI0  = 0xCC;
 178      =1  sbit CTI3  = 0xCB;
 179      =1  sbit CTI2  = 0xCA;
 180      =1  sbit CTI1  = 0xC9;
 181      =1  sbit CTI0  = 0xC8;
 182      =1  
 183      =1  /*  CANSTA  */
 184      =1  sbit RAMA7 = 0xDF;
 185      =1  sbit RAMA6 = 0xDE;
 186      =1  sbit RAMA5 = 0xDD;
 187      =1  sbit RAMA4 = 0xDC;
 188      =1  sbit RAMA3 = 0xDB;
 189      =1  sbit RAMA2 = 0xDA;
 190      =1  sbit RAMA1 = 0xD9;
 191      =1  sbit RAMA0 = 0xD8;
   7          #include <stdio.h>  
   1      =1  /*--------------------------------------------------------------------------
   2      =1  STDIO.H
   3      =1  
   4      =1  Prototypes for standard I/O functions.
   5      =1  Copyright (c) 1988-2001 Keil Elektronik GmbH and Keil Software, Inc.
   6      =1  All rights reserved.
   7      =1  --------------------------------------------------------------------------*/
   8      =1  
   9      =1  #ifndef EOF
  10      =1   #define EOF -1
  11      =1  #endif
  12      =1  
  13      =1  #ifndef NULL
  14      =1   #define NULL ((void *) 0)
  15      =1  #endif
  16      =1  
  17      =1  #ifndef _SIZE_T
  18      =1   #define _SIZE_T
  19      =1   typedef unsigned int size_t;
  20      =1  #endif
  21      =1  
  22      =1  #pragma SAVE
  23      =1  #pragma REGPARMS
  24      =1  extern char _getkey (void);
  25      =1  extern char getchar (void);
  26      =1  extern char ungetchar (char);
  27      =1  extern char putchar (char);
  28      =1  extern int printf   (const char *, ...);
  29      =1  extern int sprintf  (char *, const char *, ...);
  30      =1  extern int vprintf  (const char *, char *);
  31      =1  extern int vsprintf (char *, const char *, char *);
  32      =1  extern char *gets (char *, int n);
  33      =1  extern int scanf (const char *, ...);
  34      =1  extern int sscanf (char *, const char *, ...);
  35      =1  extern int puts (const char *);
  36      =1  
  37      =1  #pragma RESTORE
   8          #include "libtp2.h" 
   1      =1   /* libtp.H: déclaration de prototype pour LCD et décodage de clavier (4*3) */
   2      =1  /* tp microcontroleur 2000  MF/BS/AD   */
   3      =1  
   4      =1  /***************************************/
   5      =1  /* automate de transition clavier      */
C51 COMPILER V6.14  MODELE_C                                                               10/25/2018 14:31:58 PAGE 5   

   6      =1  /* valeur de retour : char             */
   7      =1  /*     - code brute de la touche       */
   8      =1  /*     - si pas de touche : 0xff       */    
   9      =1  /***************************************/
  10      =1  extern char detect_touche(void);
  11      =1  
  12      =1  /***************************************/
  13      =1  /* fonction de decodage clavier        */
  14      =1  /* retourne char 0-9 (acsii)'*', '#'   */
  15      =1  /***************************************/
  16      =1  extern char decode_touche(char code_brute);
  17      =1  
  18      =1  
  19      =1  /****************************************************************************/
  20      =1  
  21      =1    /**** lecture de l'etat du LCD  ****/
  22      =1  extern void  LCD_stat  (void);
  23      =1  
  24      =1    /**** Attendre de pouvoir realiser une transaction sur le LCD ****/  
  25      =1  extern void  LCD_wait  (void);
  26      =1  
  27      =1    /***** permet d'envoyer des codes de configuration *****/
  28      =1    /***** voir support de DOC du LCD pour les configs *****/
  29      =1  extern void  LCD_conf  (unsigned char);
  30      =1  
  31      =1    /***** positionner le curseur a une position x,y *****
  32      =1    /***** pour afficheur 1 ligne 16 caracteres:
  33      =1  		8 premiers caracteres (de gauche) sont vues comme ligne 0
  34      =1  		8 derniers caracteres (de droite) sont vues comme ligne 1
  35      =1     *****   x = 0 ou 1 numero de ligne
  36      =1     *****	 y < 8 numero de colonne
  37      =1     ***** apres execution, le curseur se positionne à (x,y)*****/
  38      =1  extern void  LCD_goto  (char,char);
  39      =1  
  40      =1    /**** fonction d'initialisation de l'afficheur ****/
  41      =1  extern void  init_lcd  (void);
  42      =1  
  43      =1    /** affiche une chaine de caracteres a la position courante sur le LCD**/
  44      =1  extern void  print_lcd (char *str);
  45      =1  
  46      =1  extern void LCD_1write(unsigned char);
   9          #include "fsm_tx.h"
   1      =1  #ifndef FSM_TX
   2      =1  #define FSM_TX
   3      =1  
   4      =1  
   5      =1  /*****************************************/
   6      =1  /* defines                               */
   7      =1  /*****************************************/
   8      =1  
   9      =1  
  10      =1  /*****************************************/
  11      =1  /* typedefs                              */
  12      =1  /*****************************************/
  13      =1  
  14      =1  
  15      =1  /*****************************************/
  16      =1  /* variables                             */
  17      =1  /*****************************************/
  18      =1  
  19      =1  
  20      =1  /*****************************************/
C51 COMPILER V6.14  MODELE_C                                                               10/25/2018 14:31:58 PAGE 6   

  21      =1  /* public                                */
  22      =1  /*****************************************/
  23      =1  
  24      =1  void fsm_tx_init();
  25      =1  void fsm_tx_update(void);
  26      =1  void fsm_tx_set_tx_data(char tx_data_input);
  27      =1  void fsm_tx_start_transmit(void);
  28      =1  bit  fsm_tx_get_tx_bit(void);
  29      =1  
  30      =1  /*****************************************/
  31      =1  /* private                               */
  32      =1  /*****************************************/
  33      =1  
  34      =1  
  35      =1  #endif // FSM_TX
  10          #include "fsm_rx.h"
   1      =1  #ifndef FSM_RX
   2      =1  #define FSM_RX
   3      =1  
   4      =1  
   5      =1  /*****************************************/
   6      =1  /* defines                               */
   7      =1  /*****************************************/
   8      =1  
   9      =1  
  10      =1  /*****************************************/
  11      =1  /* typedefs                              */
  12      =1  /*****************************************/
  13      =1  
  14      =1  
  15      =1  /*****************************************/
  16      =1  /* variables                             */
  17      =1  /*****************************************/
  18      =1  
  19      =1  
  20      =1  /*****************************************/
  21      =1  /* public                                */
  22      =1  /*****************************************/
  23      =1  
  24      =1  void fsm_rx_update(void);
  25      =1  char fsm_rx_get_rx_data();
  26      =1  void fsm_rx_set_rx_bit(bit rx_bit);
  27      =1  
  28      =1  /*****************************************/
  29      =1  /* private                               */
  30      =1  /*****************************************/
  31      =1  
  32      =1  
  33      =1  #endif // FSM_RX
  11          
  12          
  13          /*****************************************/
  14          /* declaration des variables et tableaux */
  15          /*****************************************/
  16          
  17          code int table[11] = { 0x000, 0x001, 0x003, 0x007, 0x00F, 0x01F, 0x03F, 0x07F, 0x0FF, 0x1FF, 0x3FF};
  18          int active_led = 0;
  19          int sense_fwd = 1;
  20          int increment;
  21          int tempo_counter = 0;
  22          int FLAG_tempo = 0;
  23          int test_var = 0;
C51 COMPILER V6.14  MODELE_C                                                               10/25/2018 14:31:58 PAGE 7   

  24          xdata unsigned int LEDS _at_ 0xFD00;
  25          sbit pin_tx = 0x97;
  26          sbit pin_rx = 0x96;
  27          bit tx_bit, rx_bit;
  28          
  29          /*******************************************/
  30          /* declaration des procedures et fonctions */
  31          /*******************************************/
  32          
  33          /* Function to create a small delay */
  34          int tempo() {
  35   1      	tempo_counter++;
  36   1      	if (tempo_counter==3000) {
  37   2      		tempo_counter = 0;
  38   2      		return 1;
  39   2      	}
  40   1      
  41   1      	return 0;
  42   1      }
  43          
  44          /* Function to show on the leds a moving pattern */
  45          /* received a key pressed and if it's different than 0xFF, which means no key, the direction changes */
  46          void show_pattern(char clav) {
  47   1      	if (clav != (char)0xFF) {
  48   2      		sense_fwd = !sense_fwd;
  49   2      	}
  50   1      
  51   1      	if (sense_fwd) {
  52   2      		increment = 1;
  53   2      	} else {
  54   2      		increment = -1;
  55   2      	}
  56   1      
  57   1      	if (FLAG_tempo) {
  58   2      		FLAG_tempo = 0;
  59   2      		active_led = active_led + increment;
  60   2      		if (active_led < 0) {
  61   3      			active_led = 10;
  62   3      		}
  63   2      		active_led = active_led % 11;
  64   2      
  65   2      		LEDS = table[active_led];
  66   2      	}
  67   1      }
  68          
  69          /* Setup Timer 0 */
  70          void init_timer0() {
  71   1      	TMOD = TMOD|2; // mode 2 timer 0
  72   1      	TL0  = 0; // init TL0
  73   1      	TH0  = 0; // tampon pour 192 us
  74   1      	ET0  = 1; // validation de l'interrupt timer 0
  75   1      	EA   = 1; // autorisation globale des interupts
  76   1      	TR0  = 1; // start timer 0
  77   1      }
  78          
  79          /* IRS Timer 0 */
  80          void timer0() interrupt 1 {
  81   1      	/* tempo_counter++;
  82   1      	if (tempo_counter >=1302) {
  83   1      		tempo_counter = 0;
  84   1      		FLAG_tempo = 1;
  85   1      	} */
C51 COMPILER V6.14  MODELE_C                                                               10/25/2018 14:31:58 PAGE 8   

  86   1      	tx_bit = fsm_tx_get_tx_bit();
  87   1      	pin_tx = tx_bit;
  88   1      
  89   1      	rx_bit = pin_rx;
  90   1      	fsm_rx_set_rx_bit(rx_bit);
  91   1      
  92   1      	fsm_tx_update();
  93   1      	fsm_rx_update();
  94   1      }
  95          
  96          
  97          /***************************************/
  98          /* main program                        */
  99          /***************************************/
 100          char clav;
 101          char clav_in = 0;
 102          void main (void)  {  /* debut du programme apres le startup  */
 103   1      	init_timer0();
 104   1      
 105   1        	while (1) {
 106   2      		// clav_out = detect_touche();
 107   2      		// clav_out = decode_touche(clav_out);
 108   2      
 109   2      		clav = 5;
 110   2      		fsm_tx_set_tx_data(clav);
 111   2      		fsm_tx_start_transmit();
 112   2      
 113   2      		clav_in = fsm_rx_get_rx_data();
 114   2      
 115   2      		if (clav_in != (char) 0xFF) {
 116   3      			test_var++;
 117   3      		}
 118   2      		// show_pattern(clav);
 119   2      	}
 120   1      } 
 121          
 122          
C51 COMPILER V6.14  MODELE_C                                                               10/25/2018 14:31:58 PAGE 9   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION tempo (BEGIN)
                                           ; SOURCE LINE # 34
                                           ; SOURCE LINE # 35
0000 0500        R     INC     tempo_counter+01H
0002 E500        R     MOV     A,tempo_counter+01H
0004 7002              JNZ     ?C0017
0006 0500        R     INC     tempo_counter
0008         ?C0017:
                                           ; SOURCE LINE # 36
0008 B4B80E            CJNE    A,#0B8H,?C0001
000B E500        R     MOV     A,tempo_counter
000D B40B09            CJNE    A,#0BH,?C0001
                                           ; SOURCE LINE # 37
0010 E4                CLR     A
0011 F500        R     MOV     tempo_counter,A
0013 F500        R     MOV     tempo_counter+01H,A
                                           ; SOURCE LINE # 38
0015 FE                MOV     R6,A
0016 7F01              MOV     R7,#01H
0018 22                RET     
                                           ; SOURCE LINE # 39
0019         ?C0001:
                                           ; SOURCE LINE # 41
0019 7E00              MOV     R6,#00H
001B 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 42
001D         ?C0002:
001D 22                RET     
             ; FUNCTION tempo (END)

             ; FUNCTION _show_pattern (BEGIN)
                                           ; SOURCE LINE # 46
;---- Variable 'clav' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 47
0000 EF                MOV     A,R7
0001 F4                CPL     A
0002 6011              JZ      ?C0003
                                           ; SOURCE LINE # 48
0004 E500        R     MOV     A,sense_fwd+01H
0006 4500        R     ORL     A,sense_fwd
0008 7004              JNZ     ?C0004
000A 7F01              MOV     R7,#01H
000C 8002              SJMP    ?C0005
000E         ?C0004:
000E 7F00              MOV     R7,#00H
0010         ?C0005:
0010 750000      R     MOV     sense_fwd,#00H
0013 8F00        R     MOV     sense_fwd+01H,R7
                                           ; SOURCE LINE # 49
0015         ?C0003:
                                           ; SOURCE LINE # 51
0015 E500        R     MOV     A,sense_fwd+01H
0017 4500        R     ORL     A,sense_fwd
0019 6008              JZ      ?C0006
                                           ; SOURCE LINE # 52
001B 750000      R     MOV     increment,#00H
001E 750001      R     MOV     increment+01H,#01H
                                           ; SOURCE LINE # 53
0021 8006              SJMP    ?C0007
C51 COMPILER V6.14  MODELE_C                                                               10/25/2018 14:31:58 PAGE 10  

0023         ?C0006:
                                           ; SOURCE LINE # 54
0023 74FF              MOV     A,#0FFH
0025 F500        R     MOV     increment,A
0027 F500        R     MOV     increment+01H,A
                                           ; SOURCE LINE # 55
0029         ?C0007:
                                           ; SOURCE LINE # 57
0029 E500        R     MOV     A,FLAG_tempo+01H
002B 4500        R     ORL     A,FLAG_tempo
002D 604E              JZ      ?C0010
                                           ; SOURCE LINE # 58
002F E4                CLR     A
0030 F500        R     MOV     FLAG_tempo,A
0032 F500        R     MOV     FLAG_tempo+01H,A
                                           ; SOURCE LINE # 59
0034 E500        R     MOV     A,increment+01H
0036 2500        R     ADD     A,active_led+01H
0038 F500        R     MOV     active_led+01H,A
003A E500        R     MOV     A,increment
003C 3500        R     ADDC    A,active_led
003E F500        R     MOV     active_led,A
                                           ; SOURCE LINE # 60
0040 C3                CLR     C
0041 6480              XRL     A,#080H
0043 9480              SUBB    A,#080H
0045 5006              JNC     ?C0009
                                           ; SOURCE LINE # 61
0047 750000      R     MOV     active_led,#00H
004A 75000A      R     MOV     active_led+01H,#0AH
                                           ; SOURCE LINE # 62
004D         ?C0009:
                                           ; SOURCE LINE # 63
004D AE00        R     MOV     R6,active_led
004F AF00        R     MOV     R7,active_led+01H
0051 7C00              MOV     R4,#00H
0053 7D0B              MOV     R5,#0BH
0055 120000      E     LCALL   ?C?SIDIV
0058 8C00        R     MOV     active_led,R4
005A 8D00        R     MOV     active_led+01H,R5
                                           ; SOURCE LINE # 65
005C E500        R     MOV     A,active_led+01H
005E 25E0              ADD     A,ACC
0060 FF                MOV     R7,A
0061 E500        R     MOV     A,active_led
0063 33                RLC     A
0064 FE                MOV     R6,A
0065 7400        R     MOV     A,#LOW table
0067 2F                ADD     A,R7
0068 F582              MOV     DPL,A
006A 7400        R     MOV     A,#HIGH table
006C 3E                ADDC    A,R6
006D F583              MOV     DPH,A
006F E4                CLR     A
0070 93                MOVC    A,@A+DPTR
0071 FF                MOV     R7,A
0072 7401              MOV     A,#01H
0074 93                MOVC    A,@A+DPTR
0075 90FD00            MOV     DPTR,#LEDS
0078 CF                XCH     A,R7
0079 F0                MOVX    @DPTR,A
007A A3                INC     DPTR
C51 COMPILER V6.14  MODELE_C                                                               10/25/2018 14:31:58 PAGE 11  

007B EF                MOV     A,R7
007C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 66
                                           ; SOURCE LINE # 67
007D         ?C0010:
007D 22                RET     
             ; FUNCTION _show_pattern (END)

             ; FUNCTION init_timer0 (BEGIN)
                                           ; SOURCE LINE # 70
                                           ; SOURCE LINE # 71
0000 438902            ORL     TMOD,#02H
                                           ; SOURCE LINE # 72
0003 E4                CLR     A
0004 F58A              MOV     TL0,A
                                           ; SOURCE LINE # 73
0006 F58C              MOV     TH0,A
                                           ; SOURCE LINE # 74
0008 D2A9              SETB    ET0
                                           ; SOURCE LINE # 75
000A D2AF              SETB    EA
                                           ; SOURCE LINE # 76
000C D28C              SETB    TR0
                                           ; SOURCE LINE # 77
000E 22                RET     
             ; FUNCTION init_timer0 (END)

             ; FUNCTION timer0 (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C0D0              PUSH    PSW
000A 75D000            MOV     PSW,#00H
000D C000              PUSH    AR0
000F C001              PUSH    AR1
0011 C002              PUSH    AR2
0013 C003              PUSH    AR3
0015 C004              PUSH    AR4
0017 C005              PUSH    AR5
0019 C006              PUSH    AR6
001B C007              PUSH    AR7
                                           ; SOURCE LINE # 80
                                           ; SOURCE LINE # 86
001D 120000      E     LCALL   fsm_tx_get_tx_bit
0020 9200        R     MOV     tx_bit,C
                                           ; SOURCE LINE # 87
0022 A200        R     MOV     C,tx_bit
0024 9297              MOV     pin_tx,C
                                           ; SOURCE LINE # 89
0026 A296              MOV     C,pin_rx
0028 9200        R     MOV     rx_bit,C
                                           ; SOURCE LINE # 90
002A A200        R     MOV     C,rx_bit
002C 9200        E     MOV     ?fsm_rx_set_rx_bit?BIT,C
002E 120000      E     LCALL   fsm_rx_set_rx_bit
                                           ; SOURCE LINE # 92
0031 120000      E     LCALL   fsm_tx_update
                                           ; SOURCE LINE # 93
0034 120000      E     LCALL   fsm_rx_update
                                           ; SOURCE LINE # 94
0037 D007              POP     AR7
C51 COMPILER V6.14  MODELE_C                                                               10/25/2018 14:31:58 PAGE 12  

0039 D006              POP     AR6
003B D005              POP     AR5
003D D004              POP     AR4
003F D003              POP     AR3
0041 D002              POP     AR2
0043 D001              POP     AR1
0045 D000              POP     AR0
0047 D0D0              POP     PSW
0049 D082              POP     DPL
004B D083              POP     DPH
004D D0F0              POP     B
004F D0E0              POP     ACC
0051 32                RETI    
             ; FUNCTION timer0 (END)

             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 102
                                           ; SOURCE LINE # 103
0000 120000      R     LCALL   init_timer0
0003         ?C0013:
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 109
0003 750005      R     MOV     clav,#05H
                                           ; SOURCE LINE # 110
0006 AF00        R     MOV     R7,clav
0008 120000      E     LCALL   _fsm_tx_set_tx_data
                                           ; SOURCE LINE # 111
000B 120000      E     LCALL   fsm_tx_start_transmit
                                           ; SOURCE LINE # 113
000E 120000      E     LCALL   fsm_rx_get_rx_data
0011 8F00        R     MOV     clav_in,R7
                                           ; SOURCE LINE # 115
0013 E500        R     MOV     A,clav_in
0015 F4                CPL     A
0016 60EB              JZ      ?C0013
                                           ; SOURCE LINE # 116
0018 0500        R     INC     test_var+01H
001A E500        R     MOV     A,test_var+01H
001C 70E5              JNZ     ?C0013
001E 0500        R     INC     test_var
0020         ?C0019:
                                           ; SOURCE LINE # 117
                                           ; SOURCE LINE # 119
0020 80E1              SJMP    ?C0013
             ; FUNCTION main (END)

C51 COMPILER V6.14  MODELE_C                                                               10/25/2018 14:31:58 PAGE 13  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


fsm_tx_start_transmit. . . . . . . . .  EXTERN   CODE   PROC     -----  -----
T0 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B4H  1
AC . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D6H  1
T1 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B5H  1
T2 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0094H  1
ECM0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ECH  1
EA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
_show_pattern. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  clav . . . . . . . . . . . . . . . .  * REG *  DATA   CHAR     0007H  1
ECM1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EDH  1
ECM2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EEH  1
CMI0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CCH  1
table. . . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0000H  22
CMI1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CDH  1
rx_bit . . . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0000H  1
CMI2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CEH  1
T20V . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CFH  1
ECT0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E8H  1
tx_bit . . . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0001H  1
tempo_counter. . . . . . . . . . . . .  PUBLIC   DATA   INT      0000H  2
ECT1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E9H  1
ECT2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EAH  1
ECT3 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EBH  1
CTI0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C8H  1
CT0I . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0090H  1
PCM0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FCH  1
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
CTI1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C9H  1
CT1I . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0091H  1
PCM1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FDH  1
CTI2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CAH  1
CT2I . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0092H  1
PCM2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FEH  1
pin_rx . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0096H  1
CTI3 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CBH  1
CT3I . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0093H  1
CMT0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C6H  1
pin_tx . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0097H  1
CMT1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C7H  1
RD . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B7H  1
active_led . . . . . . . . . . . . . .  PUBLIC   DATA   INT      0002H  2
PCT0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F8H  1
PCT1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F9H  1
PCT2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FAH  1
RI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0098H  1
PCT3 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FBH  1
INT0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B2H  1
CY . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D7H  1
TI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0099H  1
INT1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B3H  1
INT2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0090H  1
INT3 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0091H  1
INT4 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0092H  1
CTX0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0096H  1
INT5 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0093H  1
CTX1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0097H  1
FLAG_tempo . . . . . . . . . . . . . .  PUBLIC   DATA   INT      0004H  2
C51 COMPILER V6.14  MODELE_C                                                               10/25/2018 14:31:58 PAGE 14  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


OV . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D2H  1
fsm_tx_get_tx_bit. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
main . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
clav . . . . . . . . . . . . . . . . .  PUBLIC   DATA   CHAR     0006H  1
tempo. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
LEDS . . . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_INT    FD00H  2
WR . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B6H  1
fsm_rx_set_rx_bit. . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
TMOD . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0089H  1
IE0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0089H  1
IE1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008BH  1
sense_fwd. . . . . . . . . . . . . . .  PUBLIC   DATA   INT      0007H  2
ES0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ACH  1
ET0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A9H  1
ES1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ADH  1
ET1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ABH  1
EAD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AEH  1
TF0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008DH  1
increment. . . . . . . . . . . . . . .  PUBLIC   DATA   INT      0009H  2
ET2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EFH  1
TF1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008FH  1
RB8. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009AH  1
TH0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008CH  1
EX0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A8H  1
IT0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0088H  1
TB8. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009BH  1
EX1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AAH  1
IT1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008AH  1
P. . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D0H  1
SM0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009FH  1
TL0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008AH  1
SM1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009EH  1
RAMA0. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D8H  1
SM2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009DH  1
RAMA1. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D9H  1
PS0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BCH  1
timer0 . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
RAMA2. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DAH  1
PT0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B9H  1
PS1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BDH  1
RAMA3. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DBH  1
PT1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BBH  1
PAD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BEH  1
RS0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D3H  1
RAMA4. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DCH  1
PT2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FFH  1
TR0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008CH  1
RS1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D4H  1
RAMA5. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DDH  1
TR1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008EH  1
RAMA6. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DEH  1
RT2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0095H  1
PX0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B8H  1
RAMA7. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DFH  1
PX1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BAH  1
clav_in. . . . . . . . . . . . . . . .  PUBLIC   DATA   CHAR     000BH  1
REN. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009CH  1
C51 COMPILER V6.14  MODELE_C                                                               10/25/2018 14:31:58 PAGE 15  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


CMSR0. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C0H  1
CMSR1. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C1H  1
CMSR2. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C2H  1
CMSR3. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C3H  1
CMSR4. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C4H  1
init_timer0. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
CMSR5. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C5H  1
test_var . . . . . . . . . . . . . . .  PUBLIC   DATA   INT      000CH  2
_fsm_tx_set_tx_data. . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
RXD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B0H  1
TXD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B1H  1
F0 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D5H  1
fsm_rx_update. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
fsm_tx_update. . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
fsm_rx_get_rx_data . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    287    ----
   CONSTANT SIZE    =     22    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
