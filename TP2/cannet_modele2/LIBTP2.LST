C51 COMPILER V7.50   LIBTP2                                                                02/20/2008 11:38:34 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE LIBTP2
OBJECT MODULE PLACED IN LIBTP2.OBJ
COMPILER INVOKED BY: d:\keil750\c51\BIN\C51.EXE LIBTP2.C OPTIMIZE(9,SPEED) BROWSE INTVECTOR(0X8100) DEBUG OBJECTEXTEND C
                    -ODE SYMBOLS

line level    source

   1            /************************************************************************
   2           **     Programme exemple pour le TP micro contrôleur                  **
   3           **  La touche du clavier sera affichée sur la fenêtre SIO du PC
   4           ************************************************************************/
   5          
   6          #include <reg592.h>      /* registres spécifiques au 552 */
   7          
   8          /***************************************/
   9          /* automate de transition clavier      */
  10          /* valeur de retour : char                  */
  11          /*     - code brute de la touche          */
  12          /*     - si pas de touche : 0xff         */    
  13          /***************************************/
  14          
  15          char etat_touche=0;
  16          // registre ou se trouve le clavier
  17          // 0 C3 C2 C1 L4 L3 L2 L1
  18          xdata volatile unsigned char regtouche _at_ 0xfd08;
  19          char detect_touche() {
  20   1      register char lect_clav;
  21   1          regtouche=0x0f; /*mettre les lignes à 1*/
  22   1          lect_clav=regtouche; 
  23   1              lect_clav=regtouche; 
  24   1              lect_clav=regtouche;         
  25   1      
  26   1         if(etat_touche==0){
  27   2               if(lect_clav!=0x0f) { 
  28   3                         regtouche= lect_clav |0xf0;
  29   3                                 regtouche= lect_clav |0xf0;
  30   3                                 regtouche= lect_clav |0xf0;
  31   3                     etat_touche=1;
  32   3                         lect_clav=regtouche;
  33   3                                 lect_clav=regtouche; 
  34   3                                 lect_clav=regtouche;
  35   3                     return lect_clav;
  36   3                 } else{
  37   3                     return 0xff;
  38   3               }
  39   2         }
  40   1      
  41   1         if(etat_touche==1){
  42   2               if(lect_clav==0x0f) {
  43   3      /* pas de touche on va a l'etat 0*/
  44   3                     etat_touche=0;                         
  45   3               }
  46   2         }
  47   1         return 0xff;
  48   1      }
  49          
  50          
  51          /***************************************/
  52          /* fonction de decodage clavier        */
  53          /***************************************/
  54          
C51 COMPILER V7.50   LIBTP2                                                                02/20/2008 11:38:34 PAGE 2   

  55          
  56          /* table de translation code -> binaire*/
  57          char tab_t[12]={0x57,0x6e,0x5e,0x3e,
  58                               0x6d,0x5d,0x3d,
  59                               0x6b,0x5b,0x3b,
  60                               0x67,     0x37};
  61          
  62          char decode_touche(char code_t) {
  63   1      char i=0;
  64   1          
  65   1        while((i<12)&&(tab_t[i]!=code_t)){  
  66   2            i++;
  67   2        }
  68   1        switch(i){
  69   2               case 12: i=0xff;break;     
  70   2               case 10: i='*';break;
  71   2               case 11: i='#';break;
  72   2               default:;               /* code non valide */
  73   2        }
  74   1        return i; 
  75   1      }
  76          
  77          /**********************************************************************/
  78          /**      FONCTIONS DU LCD                                             */
  79          /**********************************************************************/
  80          /**** adresses I/O pour le LCD               ******
  81           **** 4 adresses sur le plan memoire externe ******/
  82          xdata unsigned char CTR_LCDW _at_ 0xfD02;
  83          xdata unsigned char CTR_LCDR _at_ 0xfD06;
  84          xdata unsigned char DATA_LCDW  _at_ 0xfD03;
  85          xdata unsigned char DATA_LCDR _at_ 0xfD07;
  86          
  87          
  88          /* declarations fonctions systeme */
  89          /* ------------------------------ */
  90          
  91          /**** lecture de l'etat du LCD  ****/
  92          /**** si bit 7 du retour = 1 alors le LCD est busy ***
  93           ****           aucune operation n'est realisable : ***/
  94          char LCD_stat()
  95          {
  96   1              return(CTR_LCDR);
  97   1      }
  98          /*****************************************************************/
  99          /**** Attendre de pouvoir realiser une transaction sur le LCD ****/
 100          void LCD_wait() {
 101   1               char i;
 102   1               while((LCD_stat()&0x80)==0x80){ for(i=0;i<10;i++);}
 103   1      }
 104          /***** permet d'envoyer des codes de configuration *****/
 105          /***** voir support de DOC du LCD pour les configs *****/
 106          void LCD_conf(unsigned char cc)
 107          { 
 108   1              LCD_wait() ;
 109   1              CTR_LCDW=cc;
 110   1      }
 111          
 112          /***** positionner le curseur a une position x,y *****
 113          /***** pour afficheur 1 ligne 16 caracteres:
 114                          8 premiers caracteres (de gauche) sont vues comme ligne 0
 115                          8 derniers caracteres (de droite) sont vues comme ligne 1
 116           *****   x = 0 ou 1 numero de ligne
C51 COMPILER V7.50   LIBTP2                                                                02/20/2008 11:38:34 PAGE 3   

 117           *****   y < 8 numero de colonne
 118           ***** apres execution, le curseur se positionne à (x,y)*****/
 119          void LCD_goto(char x,char y) {
 120   1              LCD_wait();
 121   1              LCD_conf(0x80+(y&0x0f)+((x&1)<<6));
 122   1      }
 123          
 124          
 125          /**** affiche un caractere a la position courante du curseur ****/
 126          void LCD_1write(unsigned char cc)
 127          {
 128   1              LCD_wait();
 129   1              DATA_LCDW=cc;
 130   1      }
 131          
 132          /** affiche une chaine de caracteres a la position courante sur le LCD**/
 133          void print_lcd(unsigned char _TXT[]) {
 134   1              unsigned char uc=0;
 135   1              while((_TXT[uc])!=0) {
 136   2                      LCD_1write(_TXT[uc++]);
 137   2                        }
 138   1      }
 139          /**** fonction d'initialisation de l'afficheur ****/
 140          void init_lcd(void) {
 141   1       //   unsigned int ii;
 142   1              /* initialisation de l'afficheur */
 143   1              
 144   1              LCD_conf(0x38);
 145   1              LCD_conf(0x14);                 
 146   1              LCD_conf(0x01);
 147   1              //LCD_conf(0x08);
 148   1              LCD_conf(0x06);
 149   1      
 150   1              LCD_conf(0x0c);
 151   1              LCD_conf(0x02);         
 152   1              LCD_conf(0x01); 
 153   1              //LCD_conf(0x0c);
 154   1      
 155   1      //      LCD_conf(0x0d);
 156   1      //      LCD_conf(0x0d);
 157   1      
 158   1      
 159   1      
 160   1              LCD_wait();
 161   1      }
 162          
 163          
C51 COMPILER V7.50   LIBTP2                                                                02/20/2008 11:38:34 PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION detect_touche (BEGIN)
                                           ; SOURCE LINE # 19
                                           ; SOURCE LINE # 21
0000 90FD08            MOV     DPTR,#regtouche
0003 740F              MOV     A,#0FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 22
0006 E0                MOVX    A,@DPTR
;---- Variable 'lect_clav' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 23
0007 E0                MOVX    A,@DPTR
                                           ; SOURCE LINE # 24
0008 E0                MOVX    A,@DPTR
0009 FE                MOV     R6,A
                                           ; SOURCE LINE # 26
000A E500        R     MOV     A,etat_touche
000C 701C              JNZ     ?C0001
                                           ; SOURCE LINE # 27
000E EE                MOV     A,R6
000F 640F              XRL     A,#0FH
0011 6014              JZ      ?C0002
                                           ; SOURCE LINE # 28
0013 EE                MOV     A,R6
0014 44F0              ORL     A,#0F0H
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 29
0017 EE                MOV     A,R6
0018 44F0              ORL     A,#0F0H
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 30
001B EE                MOV     A,R6
001C 44F0              ORL     A,#0F0H
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 31
001F 750001      R     MOV     etat_touche,#01H
                                           ; SOURCE LINE # 32
0022 E0                MOVX    A,@DPTR
                                           ; SOURCE LINE # 33
0023 E0                MOVX    A,@DPTR
                                           ; SOURCE LINE # 34
0024 E0                MOVX    A,@DPTR
                                           ; SOURCE LINE # 35
0025 FF                MOV     R7,A
0026 22                RET     
                                           ; SOURCE LINE # 36
0027         ?C0002:
                                           ; SOURCE LINE # 37
0027 7FFF              MOV     R7,#0FFH
0029 22                RET     
                                           ; SOURCE LINE # 38
                                           ; SOURCE LINE # 39
002A         ?C0001:
                                           ; SOURCE LINE # 41
002A E500        R     MOV     A,etat_touche
002C B40106            CJNE    A,#01H,?C0005
                                           ; SOURCE LINE # 42
002F BE0F03            CJNE    R6,#0FH,?C0005
                                           ; SOURCE LINE # 44
0032 E4                CLR     A
C51 COMPILER V7.50   LIBTP2                                                                02/20/2008 11:38:34 PAGE 5   

0033 F500        R     MOV     etat_touche,A
                                           ; SOURCE LINE # 45
                                           ; SOURCE LINE # 46
0035         ?C0005:
                                           ; SOURCE LINE # 47
0035 7FFF              MOV     R7,#0FFH
                                           ; SOURCE LINE # 48
0037         ?C0003:
0037 22                RET     
             ; FUNCTION detect_touche (END)

             ; FUNCTION _decode_touche (BEGIN)
                                           ; SOURCE LINE # 62
;---- Variable 'code_t' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 63
;---- Variable 'i' assigned to Register 'R6' ----
0000 E4                CLR     A
0001 FE                MOV     R6,A
0002         ?C0007:
                                           ; SOURCE LINE # 65
0002 7400        R     MOV     A,#LOW tab_t
0004 2E                ADD     A,R6
0005 F8                MOV     R0,A
0006 E6                MOV     A,@R0
0007 6F                XRL     A,R7
0008 6004              JZ      ?C0008
                                           ; SOURCE LINE # 66
000A 0E                INC     R6
                                           ; SOURCE LINE # 67
000B BE0CF4            CJNE    R6,#0CH,?C0007
000E         ?C0008:
                                           ; SOURCE LINE # 68
000E EE                MOV     A,R6
000F 24F6              ADD     A,#0F6H
0011 600A              JZ      ?C0011
0013 14                DEC     A
0014 600B              JZ      ?C0012
0016 14                DEC     A
0017 700A              JNZ     ?C0009
                                           ; SOURCE LINE # 69
0019         ?C0010:
0019 7EFF              MOV     R6,#0FFH
001B 8006              SJMP    ?C0009
                                           ; SOURCE LINE # 70
001D         ?C0011:
001D 7E2A              MOV     R6,#02AH
001F 8002              SJMP    ?C0009
                                           ; SOURCE LINE # 71
0021         ?C0012:
0021 7E23              MOV     R6,#023H
                                           ; SOURCE LINE # 72
                                           ; SOURCE LINE # 73
0023         ?C0009:
                                           ; SOURCE LINE # 74
0023 AF06              MOV     R7,AR6
                                           ; SOURCE LINE # 75
0025         ?C0014:
0025 22                RET     
             ; FUNCTION _decode_touche (END)

             ; FUNCTION LCD_stat (BEGIN)
                                           ; SOURCE LINE # 94
C51 COMPILER V7.50   LIBTP2                                                                02/20/2008 11:38:34 PAGE 6   

                                           ; SOURCE LINE # 95
                                           ; SOURCE LINE # 96
0000 90FD06            MOV     DPTR,#CTR_LCDR
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 97
0005         ?C0015:
0005 22                RET     
             ; FUNCTION LCD_stat (END)

             ; FUNCTION LCD_wait (BEGIN)
                                           ; SOURCE LINE # 100
;---- Variable 'i' assigned to Register 'R6' ----
0000         ?C0016:
                                           ; SOURCE LINE # 102
0000 120000      R     LCALL   LCD_stat
0003 EF                MOV     A,R7
0004 FD                MOV     R5,A
0005 ED                MOV     A,R5
0006 30E70D            JNB     ACC.7,?C0021
0009 E4                CLR     A
000A FE                MOV     R6,A
000B         ?C0018:
000B C3                CLR     C
000C EE                MOV     A,R6
000D 6480              XRL     A,#080H
000F 948A              SUBB    A,#08AH
0011 50ED              JNC     ?C0016
0013 0E                INC     R6
0014 80F5              SJMP    ?C0018
                                           ; SOURCE LINE # 103
0016         ?C0021:
0016 22                RET     
             ; FUNCTION LCD_wait (END)

             ; FUNCTION _LCD_conf (BEGIN)
                                           ; SOURCE LINE # 106
;---- Variable 'cc' assigned to Register 'R4' ----
0000 AC07              MOV     R4,AR7
                                           ; SOURCE LINE # 107
                                           ; SOURCE LINE # 108
0002 120000      R     LCALL   LCD_wait
                                           ; SOURCE LINE # 109
0005 90FD02            MOV     DPTR,#CTR_LCDW
0008 EC                MOV     A,R4
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 110
000A 22                RET     
             ; FUNCTION _LCD_conf (END)

             ; FUNCTION _LCD_goto (BEGIN)
                                           ; SOURCE LINE # 119
;---- Variable 'y' assigned to Register 'R4' ----
0000 AC05              MOV     R4,AR5
;---- Variable 'x' assigned to Register 'R3' ----
0002 AB07              MOV     R3,AR7
                                           ; SOURCE LINE # 120
0004 120000      R     LCALL   LCD_wait
                                           ; SOURCE LINE # 121
0007 EB                MOV     A,R3
0008 5401              ANL     A,#01H
000A C4                SWAP    A
C51 COMPILER V7.50   LIBTP2                                                                02/20/2008 11:38:34 PAGE 7   

000B 33                RLC     A
000C 33                RLC     A
000D 54C0              ANL     A,#0C0H
000F FF                MOV     R7,A
0010 EC                MOV     A,R4
0011 540F              ANL     A,#0FH
0013 2480              ADD     A,#080H
0015 2F                ADD     A,R7
0016 FF                MOV     R7,A
0017 020000      R     LJMP    _LCD_conf
             ; FUNCTION _LCD_goto (END)

             ; FUNCTION _LCD_1write (BEGIN)
                                           ; SOURCE LINE # 126
;---- Variable 'cc' assigned to Register 'R4' ----
0000 AC07              MOV     R4,AR7
                                           ; SOURCE LINE # 127
                                           ; SOURCE LINE # 128
0002 120000      R     LCALL   LCD_wait
                                           ; SOURCE LINE # 129
0005 90FD03            MOV     DPTR,#DATA_LCDW
0008 EC                MOV     A,R4
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 130
000A 22                RET     
             ; FUNCTION _LCD_1write (END)

             ; FUNCTION _print_lcd (BEGIN)
                                           ; SOURCE LINE # 133
0000 8B00        R     MOV     _TXT,R3
0002 8A00        R     MOV     _TXT+01H,R2
0004 8900        R     MOV     _TXT+02H,R1
                                           ; SOURCE LINE # 134
0006 E4                CLR     A
0007 F500        R     MOV     uc,A
0009         ?C0025:
                                           ; SOURCE LINE # 135
0009 AB00        R     MOV     R3,_TXT
000B AA00        R     MOV     R2,_TXT+01H
000D A900        R     MOV     R1,_TXT+02H
000F 850082      R     MOV     DPL,uc
0012 758300            MOV     DPH,#00H
0015 120000      E     LCALL   ?C?CLDOPTR
0018 6012              JZ      ?C0027
                                           ; SOURCE LINE # 136
001A AF00        R     MOV     R7,uc
001C 0500        R     INC     uc
001E 8F82              MOV     DPL,R7
0020 758300            MOV     DPH,#00H
0023 120000      E     LCALL   ?C?CLDOPTR
0026 FF                MOV     R7,A
0027 120000      R     LCALL   _LCD_1write
                                           ; SOURCE LINE # 137
002A 80DD              SJMP    ?C0025
                                           ; SOURCE LINE # 138
002C         ?C0027:
002C 22                RET     
             ; FUNCTION _print_lcd (END)

             ; FUNCTION init_lcd (BEGIN)
                                           ; SOURCE LINE # 140
                                           ; SOURCE LINE # 144
C51 COMPILER V7.50   LIBTP2                                                                02/20/2008 11:38:34 PAGE 8   

0000 7F38              MOV     R7,#038H
0002 120000      R     LCALL   _LCD_conf
                                           ; SOURCE LINE # 145
0005 7F14              MOV     R7,#014H
0007 120000      R     LCALL   _LCD_conf
                                           ; SOURCE LINE # 146
000A 7F01              MOV     R7,#01H
000C 120000      R     LCALL   _LCD_conf
                                           ; SOURCE LINE # 148
000F 7F06              MOV     R7,#06H
0011 120000      R     LCALL   _LCD_conf
                                           ; SOURCE LINE # 150
0014 7F0C              MOV     R7,#0CH
0016 120000      R     LCALL   _LCD_conf
                                           ; SOURCE LINE # 151
0019 7F02              MOV     R7,#02H
001B 120000      R     LCALL   _LCD_conf
                                           ; SOURCE LINE # 152
001E 7F01              MOV     R7,#01H
0020 120000      R     LCALL   _LCD_conf
                                           ; SOURCE LINE # 160
0023 020000      R     LJMP    LCD_wait
             ; FUNCTION init_lcd (END)

C51 COMPILER V7.50   LIBTP2                                                                02/20/2008 11:38:34 PAGE 9   

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


tab_t. . . . . . . . . . . . . . . . .  PUBLIC   DATA   ARRAY    0000H  12
etat_touche. . . . . . . . . . . . . .  PUBLIC   DATA   CHAR     000CH  1
DATA_LCDR. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   FD07H  1
_print_lcd . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  _TXT . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  3
  uc . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0003H  1
DATA_LCDW. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   FD03H  1
_decode_touche . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  code_t . . . . . . . . . . . . . . .  * REG *  DATA   CHAR     0007H  1
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   CHAR     0006H  1
_LCD_conf. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  cc . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0004H  1
init_lcd . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
regtouche. . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   FD08H  1
_LCD_goto. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  x. . . . . . . . . . . . . . . . . .  * REG *  DATA   CHAR     0003H  1
  y. . . . . . . . . . . . . . . . . .  * REG *  DATA   CHAR     0004H  1
detect_touche. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  lect_clav. . . . . . . . . . . . . .  * REG *  DATA   CHAR     0006H  1
LCD_wait . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   CHAR     0006H  1
CTR_LCDR . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   FD06H  1
LCD_stat . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_LCD_1write. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  cc . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0004H  1
CTR_LCDW . . . . . . . . . . . . . . .  PUBLIC   XDATA  U_CHAR   FD02H  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    254    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     13       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
